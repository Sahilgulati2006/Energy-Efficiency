# -*- coding: utf-8 -*-
"""Energy Efficiency Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sMrWw_frUhI27zq3jPwQo8S4kStoOd4s
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

from google.colab import drive
drive.mount('/content/drive')

!kaggle datasets download -d elikplim/eergy-efficiency-dataset

from zipfile import ZipFile
file_name = '/content/eergy-efficiency-dataset.zip'
with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print('file extracted')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import seaborn as sns

data = pd.read_csv('/content/ENB2012_data.csv')

data.head()

# Rename columns based on their real names
data.columns = [
    "Relative Compactness",   # X1
    "Surface Area",           # X2
    "Wall Area",              # X3
    "Roof Area",              # X4
    "Overall Height",         # X5
    "Orientation",            # X6
    "Glazing Area",           # X7
    "Glazing Area Distribution",  # X8
    "Heating Load",           # Y1
    "Cooling Load"            # Y2
]

# Verify the updated column names
print(data.head())

data.columns

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()

data.isnull().sum()

import seaborn as sns
import matplotlib.pyplot as plt

data.hist(figsize=(12, 10), bins=20, color='skyblue')
plt.suptitle("Feature Distributions")
plt.show()

from sklearn.model_selection import train_test_split
X = data.iloc[:, :-2]  # All features except the last two columns
y_heating = data['Heating Load']  # Heating Load
y_cooling = data['Cooling Load']  # Cooling Load
X_train, X_test, y_train, y_test = train_test_split(X, y_heating, test_size=0.3, random_state=42)

from xgboost import XGBRegressor

model = XGBRegressor()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score

rmse = np.sqrt(mean_squared_error(y_test, predictions))
r2 = r2_score(y_test, predictions)

print(f"RMSE: {rmse}")
print(f"RÂ² Score: {r2}")

import plotly.express as px

fig = px.scatter(x=y_test, y=predictions, labels={'x': 'Actual Values', 'y': 'Predicted Values'},
                 title="Actual vs Predicted Heating Load")
fig.add_shape(type="line", line_color="red", x0=min(y_test), y0=min(y_test),
              x1=max(y_test), y1=max(y_test))
fig.show()

from xgboost import plot_importance

plt.figure(figsize=(10, 6))
plot_importance(model, importance_type='weight', title="Feature Importance", max_num_features=10)
plt.show()

import shap

explainer = shap.Explainer(model, X_test)
shap_values = explainer(X_test)

shap.summary_plot(shap_values, X_test, plot_type="bar")
shap.summary_plot(shap_values, X_test)

residuals = y_test - predictions
plt.scatter(predictions, residuals, alpha=0.6)
plt.axhline(0, color='red', linestyle='--')
plt.title("Residuals of Predictions")
plt.xlabel("Predicted Values")
plt.ylabel("Residuals")
plt.show()

sns.histplot(residuals, kde=True, color="blue")
plt.title("Residuals Distribution")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.show()

# Heating Load Model
model_heating = XGBRegressor()
model_heating.fit(X_train, y_train)

# Cooling Load Model
y_train_cooling = data['Cooling Load'][X_train.index]
model_cooling = XGBRegressor()
model_cooling.fit(X_train, y_train_cooling)

def predict_loads(input_features):
    heating_pred = model_heating.predict([input_features])
    cooling_pred = model_cooling.predict([input_features])
    return heating_pred[0], cooling_pred[0]

import streamlit as st

st.title("Energy Efficiency Predictor")
st.write("Input building parameters to predict heating and cooling loads.")

# Input sliders for features
relative_compactness = st.slider("Relative Compactness", 0.5, 1.0, 0.8)
surface_area = st.slider("Surface Area", 500, 1000, 750)
wall_area = st.slider("Wall Area", 200, 500, 300)
roof_area = st.slider("Roof Area", 100, 500, 200)
overall_height = st.slider("Overall Height", 3.0, 7.0, 5.5)
orientation = st.selectbox("Orientation", [2, 3, 4, 5])
glazing_area = st.slider("Glazing Area", 0.0, 0.4, 0.2)
glazing_area_dist = st.selectbox("Glazing Area Distribution", [0, 1, 2, 3, 4])

# Predict Button
if st.button("Predict"):
    input_features = [
        relative_compactness, surface_area, wall_area, roof_area,
        overall_height, orientation, glazing_area, glazing_area_dist
    ]
    heating, cooling = predict_loads(input_features)
    st.write(f"Predicted Heating Load: {heating:.2f}")
    st.write(f"Predicted Cooling Load: {cooling:.2f}")
if st.button("Predict Small House"):
    input_features = [0.7, 600, 300, 150, 5.0, 3, 0.1, 2]
    heating, cooling = predict_loads(input_features)
    st.write(f"Small House Heating Load: {heating:.2f}")
    st.write(f"Small House Cooling Load: {cooling:.2f}")